# echo /target=<target file>  #  the target file name
# echo /platform=xxxx  # the target platform. Options are c64 (for c64 compatible machine code), vic20 or vc20, x16 (for the Commander (NOT Commodore) X16), js (for Javascript) and ps (for Powershell/-script), default is c64
echo /generatesrc=false
#echo /constprop=false  # enables/disables constant propagation optimizations
#echo /constfolding=false  # enables/disables constant folding optimizations
#echo /constopt=false  # enables/disables constant pool optimizations
#echo /ilangopt=false  # enables/disables intermediate language optimizations
#echo /nlangopt=false  # enables/disables native language optimizations
#echo /smartlinker=true  # enables/disables linker optimizations for size
#echo /deadstoreopt=false  # enables/disables dead store elimination for numbers
#echo /deadstoreoptstr=false  # enables/disables dead store elimination for strings
#echo /deadcodeopt=false  # enables/disables dead code elimination. Default is false.
#echo /loopopt=false  # enables/disables the removal of empty loops
# echo /addressheader=true|false  # enables/disables the writing of the two address header bytes
#echo /floatopt=false  # enables/disables some additional floating point optimizations, which might impact accuracy. Default is false.
#echo /xfloatopt=false  # enables/disables additional floating point optimizations. While they speed up some operations by up to 25%, they need more memory.
#echo /intopt=false  # enables/disables some integer optimizations
# echo /compactlevel=[3...]  # sets the compactor level. The lower the level, the more compact (but slower) the code. 0 means off!
echo /compactlevel=0  # sets the compactor level. The lower the level, the more compact (but slower) the code. 0 means off!
# echo /progstart=xxxxx|$yyyy  # sets the start address for the compiled program. If close to the machine's BASIC start address, a BASIC header will be added automatically.
# echo /varstart=xxxxx|$yyyy  # the start address for variables. If none is given, they will be located right after the runtime code.
# echo /varend=xxxxx|$yyyy  # the end address of the variable memory, i.e. in fact the end of the string memory.
# echo /runtimestart=xxxxx|$yyyy  # the start address of the runtime's code. If none is given, it follows the program's code.
# echo /sysbuffer=xxxxx|$yyyy  # the start address of the buffer used to execute SYS commands with parameters. Default is 820 for the CBM machines and 1024 for the X16. If set to 0, the runtime will reserve its own buffer in BASIC memory.
# echo /alloff=true  # if specified, all optimizations will be turned off
# echo /vice=<path>  # sets a path to the VICE executable. If specified, the compiled prg file will be started in VICE right away.
# echo /memconfig=0|3|8  # the memory configuration in case of VIC20 as the target machine. 0 means 'unexpanded', 3 means with a 3k expansion, 8 means with an 8k or larger expansion. Default is 8.
# echo /symboltable=<file>  # this only applies to the X16 target platform. It lets you specify a different symbol table to compile for different ROM releases. The default symbol table should match the latest ROM release.
# echo /tolower=true|false  # if true, all strings in the source code will be treated as lower case. This can be useful when compiling BASIC code copied directly from an emulator. Default is false.
# echo /flipcase=true|false  # if true, the casing of strings in the source code will be reversed. This can be useful when compiling BASIC code copied directly from an emulator. Default is false.
# echo /nondecimals=true|false  # if true, hexadecimal and binary numbers can be indicated by & and %. Default is false, except for the X16 platform, where it's enabled by default.
# echo /multipart=true|false  # if false (default) the target file contains all binary data regardless of the address in memory. If true, several files will be written if the addresses of the program's parts aren't adjacent.
# echo /memhole=<start1-end1>,<start2-end2>,...  # Defines holes/locked regions in memory. The compiled program won't use these memory locations for compiled code and variables. If a hole is located after the end of the compiled program, it will be ignored. Default is none.
